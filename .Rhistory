SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
mean(SE(data_predictions_informed$No_Change, data_predictions_informed$log_change_s2))
mean(SE(data_predictions_informed$No_Change, data_predictions_informed$log_change_s3))
mean(SE(data_predictions_informed$No_Change, data_predictions_informed$log_change_s4))
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_task2, mean_loss_TADDA1_L1_task2, mean_loss_TADDA2_L1_task2)
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_task2, mean_loss_TADDA1_L1_task2, mean_loss_TADDA2_L1_task2)
mean_loss_task2
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
# combine lists to data frame and select months that are relevant for evaluation
data_predictions_uninformed <- merge(data_fatalities, cbind(bind_rows(predictions_uninformed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
data_predictions_informed <- merge(data_fatalities, cbind(bind_rows(predictions_informed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
return(preds)
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[(w_begin + s):(w_begin + w_length + s - 1)] + 1) -
log(data_c$fatalities[w_begin + w_length + s - 1] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
return(preds)
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
# initialise objects
predictions_uninformed <- predictions_informed <- list()
# compute predictions for each country, score and prediction horizon
for (country in 1:length(unique(data_fatalities$country_name))) {
current_country_name <- unique(data_fatalities$country_name)[country]
data_country <- data_fatalities %>% filter(country_name == current_country_name)
# case 1 (uninformed): use log change distribution directly
list_uninformed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "uninformed", s = step_ahead))
predictions_uninformed[[country]] <- cbind("country_name" = current_country_name, reduce(list_uninformed, full_join, by = "month_id"))
# case 2 (informed): construct the log change distribution based on current observation and past fatalities
list_informed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "informed", s = step_ahead))
predictions_informed[[country]] <- cbind("country_name" = current_country_name, reduce(list_informed, full_join, by = "month_id"))
}
# combine lists to data frame and select months that are relevant for evaluation
data_predictions_uninformed <- merge(data_fatalities, cbind(bind_rows(predictions_uninformed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
data_predictions_informed <- merge(data_fatalities, cbind(bind_rows(predictions_informed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
return(preds)
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[(w_begin):(w_begin + w_length - 1)] + 1) -
log(data_c$fatalities[w_begin + w_length + s - 1] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
return(preds)
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
# initialise objects
predictions_uninformed <- predictions_informed <- list()
# compute predictions for each country, score and prediction horizon
for (country in 1:length(unique(data_fatalities$country_name))) {
current_country_name <- unique(data_fatalities$country_name)[country]
data_country <- data_fatalities %>% filter(country_name == current_country_name)
# case 1 (uninformed): use log change distribution directly
list_uninformed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "uninformed", s = step_ahead))
predictions_uninformed[[country]] <- cbind("country_name" = current_country_name, reduce(list_uninformed, full_join, by = "month_id"))
# case 2 (informed): construct the log change distribution based on current observation and past fatalities
list_informed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "informed", s = step_ahead))
predictions_informed[[country]] <- cbind("country_name" = current_country_name, reduce(list_informed, full_join, by = "month_id"))
}
# combine lists to data frame and select months that are relevant for evaluation
data_predictions_uninformed <- merge(data_fatalities, cbind(bind_rows(predictions_uninformed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
data_predictions_informed <- merge(data_fatalities, cbind(bind_rows(predictions_informed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
SE_loss_informed
TADDA1_L1_loss_informed
TADDA2_L1_loss_informed
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
SE_loss_informed_df
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA1_L1_loss_informed_df
TADDA1_L1_loss_informed_df
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_SE_informed_task2
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[(w_begin):(w_begin + w_length - 1)] + 1) -
log(data_c$fatalities[w_begin + w_length + s - 1] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_uninformed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_uninformed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_uninformed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[(w_begin):(w_begin + w_length)] + 1) -
log(data_c$fatalities[w_begin + w_length] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[(w_begin):(w_begin + w_length)] + 1) -
log(data_c$fatalities[w_begin + w_length] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
# TADDA-scores that were used in paper: TADDA1 = TADDA1_L1, TADDA2 = TADDA2_L1, each with epsilon = 0.048
BA_names <- c("BA_SE", "BA_TADDA1_L1", "BA_TADDA2_L1")
# initialise objects
predictions_uninformed <- predictions_informed <- list()
# compute predictions for each country, score and prediction horizon
for (country in 1:length(unique(data_fatalities$country_name))) {
current_country_name <- unique(data_fatalities$country_name)[country]
data_country <- data_fatalities %>% filter(country_name == current_country_name)
# case 1 (uninformed): use log change distribution directly
list_uninformed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "uninformed", s = step_ahead))
predictions_uninformed[[country]] <- cbind("country_name" = current_country_name, reduce(list_uninformed, full_join, by = "month_id"))
# case 2 (informed): construct the log change distribution based on current observation and past fatalities
list_informed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "informed", s = step_ahead))
predictions_informed[[country]] <- cbind("country_name" = current_country_name, reduce(list_informed, full_join, by = "month_id"))
}
# combine lists to data frame and select months that are relevant for evaluation
data_predictions_uninformed <- merge(data_fatalities, cbind(bind_rows(predictions_uninformed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
data_predictions_informed <- merge(data_fatalities, cbind(bind_rows(predictions_informed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
write.csv(mean_loss_task2)
write.csv(mean_loss_task2. "mean_loss_task2.csv")
write.csv(mean_loss_task2, "mean_loss_task2.csv")
mean_loss_task2
write.csv(round(mean_loss_task2, 3), "mean_loss_task2.csv")
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task1), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task1), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task1), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
write.csv(round(mean_loss_task2, 3), "mean_loss_task2.csv")
round(mean_loss_task2, 3)
### Functions for Bayes Acts of different scoring functions of AE, SE and TADDA
# Lotta Rüter
# lotta.rueter@kit.edu
# ----
### BAYES ACTS
# ----
## L1 Bayes Acts
BA_AE <- function(distribution_Y) {
median(distribution_Y, type = 4)
}
BA_TADDA_L1 <- function(distribution_Y) {
m <- median(distribution_Y, type = 4)
pi <- sum(sign(m) != sign(distribution_Y))/length(distribution_Y)
ifelse(pi<1/3, quantile(distribution_Y, 0.5 * (1 - sign(m)*pi), type = 4), 0)
}
BA_TADDA1_L1 <- function(distribution_Y, epsilon) {
m <- median(distribution_Y, type = 4)
if(m < (-epsilon)) {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
F_epsilon <- ecdf(distribution_Y)(epsilon)
critical_value <- F_minus_epsilon / (2 - F_epsilon)
if (critical_value > 0.5) {
return(quantile(distribution_Y, 0.5*(2-F_epsilon), type = 4))
} else {
return(-epsilon)
}
}
else if(m <= epsilon) {
return(m)
}
else {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
F_epsilon <- ecdf(distribution_Y)(epsilon)
critical_value <- (F_epsilon - F_minus_epsilon) / (1 + F_minus_epsilon)
if (critical_value >= 0.5) {
return(epsilon)
} else {
return(quantile(distribution_Y, 0.5*(1-F_minus_epsilon), type = 4))
}
}
}
BA_TADDA2_L1 <- function(distribution_Y, epsilon) {
m <- median(distribution_Y, type = 4)
# case m < -epsilon
if(m < (-epsilon)) {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
critical_value <- F_minus_epsilon / (2 - F_minus_epsilon)
if (critical_value > 0.5) {
return(quantile(distribution_Y, 0.5*(2-F_minus_epsilon), type = 4))
} else {
return(-epsilon)
}
}
else if(m <= epsilon) {
return(m)
}
else {
F_epsilon <- ecdf(distribution_Y)(epsilon)
critical_value <- 2 * F_epsilon / (1 + F_epsilon)
if (critical_value >= 0.5) {
return(epsilon)
} else {
return(quantile(distribution_Y, 0.5*(1 - F_epsilon), type = 4))
}
}
}
## L2 Bayes Acts
BA_SE <- function(distribution_Y) {
mean(distribution_Y)
}
BA_TADDA_L2 <- function(distribution_Y) {
mu <- mean(distribution_Y)
pi <- sum(sign(mu) != sign(distribution_Y))/length(distribution_Y)
mu / (1+pi)
}
BA_TADDA1_L2 <- function(distribution_Y, epsilon) {
mu <- mean(distribution_Y)
if(mu < (-epsilon)) {
F_epsilon <- ecdf(distribution_Y)(epsilon)
denominator <- 2 - F_epsilon
return(mu/denominator
- epsilon * (1-F_epsilon)/denominator)
}
else if(mu <= epsilon){
return(mu)
}
else {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
denominator <- 1 + F_minus_epsilon
return(mu/denominator
+ epsilon * F_minus_epsilon/denominator)
}
}
BA_TADDA2_L2 <- function(distribution_Y, epsilon) {
mu <- mean(distribution_Y)
if(mu < (-epsilon)) {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
F_epsilon <- ecdf(distribution_Y)(epsilon)
denominator <- 2 - F_minus_epsilon
return(mu/denominator
- epsilon * (F_epsilon-F_minus_epsilon)/denominator
+ epsilon * (1-F_epsilon)/denominator)
}
else if(mu <= epsilon){
return(mu)
}
else {
F_minus_epsilon <- ecdf(distribution_Y)(-epsilon)
F_epsilon <- ecdf(distribution_Y)(epsilon)
denominator <- 1 + F_epsilon
return(mu/denominator
- epsilon * F_minus_epsilon/denominator
+ epsilon * (F_epsilon-F_minus_epsilon)/denominator)
}
}
# ----
### SUMMARY FUNCTIONS
# ----
# bayes acts of SE, TADDA1_L1, TADDA2_L1
bayes_acts <- function(distribution_Y, epsilon) {
data.frame(
"BA_SE" = BA_SE(distribution_Y),
"BA_TADDA1_L1" = BA_TADDA1_L1(distribution_Y, epsilon),
"BA_TADDA2_L1" = BA_TADDA2_L1(distribution_Y, epsilon)
)
}
# predictions for rolling windows
bayes_acts_predictions <- function(variant = "informed", data_c = data_country, s = step_ahead, w_length = window_length, eps = epsilon) {
if(variant == "uninformed") {
col_name <- paste("log_change_s", s, sep = "")
predictions <- lapply(1:(nrow(data_c)-w_length), function(w_begin) {
log_change_distribution <- data_c[w_begin:(w_begin + w_length - 1), col_name]
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else if(variant == "informed") {
predictions <- lapply(1:(nrow(data_c)-w_length-s), function(w_begin) {
log_change_distribution <- log(data_c$fatalities[w_begin:(w_begin + w_length)] + 1) -
log(data_c$fatalities[w_begin + w_length] + 1)
preds <- data.frame("month_id" = data_c$month_id[w_begin + w_length + s], bayes_acts(log_change_distribution, eps))
colnames(preds) <- c("month_id", paste(colnames(preds)[2:ncol(preds)], "_s", s, sep = ""))
rownames(preds) <- NULL
preds
})
} else { stop("variant must bei either 'informed' or 'uninformed'") }
bind_rows(predictions)
}
compute_losses <- function(s, loss, data_all, eps = epsilon) {
true_data_colname <- paste("log_change_s", s, sep = "")
predictions_colnames <- c(paste(BA_names, s, sep = "_s"), "No_Change")
if(loss == "SE") {
df_losses <- SE(data_all[, predictions_colnames], data_all[, true_data_colname])
} else if(loss == "TADDA1_L1") {
df_losses <- list.cbind(lapply(predictions_colnames, function(colname) TADDA_L1_v1(data_all[, colname], data_all[, true_data_colname], eps)))
} else if(loss == "TADDA2_L1") {
df_losses <- list.cbind(lapply(predictions_colnames, function(colname) TADDA_L1_v2(data_all[, colname], data_all[, true_data_colname], eps)))
} else { stop("'loss' must bei either 'SE', 'TADDA1_L1' or 'TADDA2_L1'")  }
colnames(df_losses) <- c(paste("loss", loss, predictions_colnames, sep = "_"))
colnames(df_losses)[ncol(df_losses)] <- paste(colnames(df_losses)[ncol(df_losses)], "_s", s, sep = "")
df_losses <- cbind("month_id" = data_all$month_id, df_losses)
df_losses
}
library(tidyverse) # required for "reduce" function
library(rlist)
# set working directory
current_path = rstudioapi::getActiveDocumentContext()$path # get path of this file
setwd(dirname(current_path))
# get scoring functions
source("Illustration/functions.R")
source("bayes_acts_functions.R")
# read in data
data_fatalities <- read.csv(paste("Data/data_fatalities.csv"))[,-1]
# set parameters & choose task windows
epsilon <- 0.048
window_length <- 12 # use data of the past year for predictions
month_id_task1 <- 490:495 # true future of challenge (10/20-03/21)
month_id_task2 <- 445:480 # test set (01/17-12/19)
# TADDA-scores that were used in paper: TADDA1 = TADDA1_L1, TADDA2 = TADDA2_L1, each with epsilon = 0.048
BA_names <- c("BA_SE", "BA_TADDA1_L1", "BA_TADDA2_L1")
# initialise objects
predictions_uninformed <- predictions_informed <- list()
# compute predictions for each country, score and prediction horizon
for (country in 1:length(unique(data_fatalities$country_name))) {
current_country_name <- unique(data_fatalities$country_name)[country]
data_country <- data_fatalities %>% filter(country_name == current_country_name)
# case 1 (uninformed): use log change distribution directly
list_uninformed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "uninformed", s = step_ahead))
predictions_uninformed[[country]] <- cbind("country_name" = current_country_name, reduce(list_uninformed, full_join, by = "month_id"))
# case 2 (informed): construct the log change distribution based on current observation and past fatalities
list_informed <- lapply(1:7, function(step_ahead) bayes_acts_predictions(variant = "informed", s = step_ahead))
predictions_informed[[country]] <- cbind("country_name" = current_country_name, reduce(list_informed, full_join, by = "month_id"))
}
# combine lists to data frame and select months that are relevant for evaluation
data_predictions_uninformed <- merge(data_fatalities, cbind(bind_rows(predictions_uninformed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
data_predictions_informed <- merge(data_fatalities, cbind(bind_rows(predictions_informed), "No_Change" = 0),
by = c("country_name", "month_id")) %>% filter(month_id %in% 445:495)
# compute losses for each prediction horizon and loss function
SE_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "SE", data_all = data_predictions_informed))
TADDA1_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA1_L1", data_all = data_predictions_informed))
TADDA2_L1_loss_informed <- lapply(1:7, function(s) compute_losses(s, loss = "TADDA2_L1", data_all = data_predictions_informed))
SE_loss_informed_df <- list.cbind(SE_loss_informed)[, !duplicated(colnames(list.cbind(SE_loss_informed)))]
TADDA1_L1_loss_informed_df <- list.cbind(TADDA1_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA1_L1_loss_informed)))]
TADDA2_L1_loss_informed_df <- list.cbind(TADDA2_L1_loss_informed)[, !duplicated(colnames(list.cbind(TADDA2_L1_loss_informed)))]
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task1), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task1), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task1), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
mean_loss_task2
# mean losses per horizon
mean_loss_SE_informed_task2 <- colMeans(SE_loss_informed_df[which(SE_loss_informed_df$month_id %in% month_id_task2), ])
mean_loss_TADDA1_L1_informed_task2 <- colMeans(TADDA1_L1_loss_informed_df[which(TADDA1_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_TADDA2_L1_informed_task2 <- colMeans(TADDA2_L1_loss_informed_df[which(TADDA2_L1_loss_informed_df[,1] %in% month_id_task2), ])
mean_loss_task2 <- rbind(mean_loss_SE_informed_task2, mean_loss_TADDA1_L1_informed_task2, mean_loss_TADDA2_L1_informed_task2)
write.csv(round(mean_loss_task2, 3), "mean_loss_task2.csv")
round(mean_loss_task2, 3)
